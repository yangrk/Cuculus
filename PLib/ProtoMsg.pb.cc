// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoMsg.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protomsg {

namespace {

const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoMsg_2eproto() {
  protobuf_AddDesc_ProtoMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoMsg.proto");
  GOOGLE_CHECK(file != NULL);
  TaskInfo_descriptor_ = file->message_type(0);
  static const int TaskInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, noperatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, ntasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, ntaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, strexetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, strtaskchain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, strcomment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, strcreatetime_),
  };
  TaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfo_descriptor_, &TaskInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoMsg_2eproto() {
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
}

void protobuf_AddDesc_ProtoMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ProtoMsg.proto\022\010protomsg\"\231\001\n\010TaskInfo\022"
    "\024\n\014nOperateType\030\001 \002(\005\022\021\n\tnTaskType\030\002 \002(\005"
    "\022\017\n\007nTaskId\030\003 \001(\005\022\022\n\nstrExeTime\030\004 \001(\t\022\024\n"
    "\014strTaskChain\030\005 \001(\t\022\022\n\nstrComment\030\006 \001(\t\022"
    "\025\n\rstrCreateTime\030\007 \001(\t", 182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoMsg.proto", &protobuf_RegisterTypes);
  TaskInfo::default_instance_ = new TaskInfo();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoMsg_2eproto {
  StaticDescriptorInitializer_ProtoMsg_2eproto() {
    protobuf_AddDesc_ProtoMsg_2eproto();
  }
} static_descriptor_initializer_ProtoMsg_2eproto_;


// ===================================================================

const ::std::string TaskInfo::_default_strexetime_;
const ::std::string TaskInfo::_default_strtaskchain_;
const ::std::string TaskInfo::_default_strcomment_;
const ::std::string TaskInfo::_default_strcreatetime_;
#ifndef _MSC_VER
const int TaskInfo::kNOperateTypeFieldNumber;
const int TaskInfo::kNTaskTypeFieldNumber;
const int TaskInfo::kNTaskIdFieldNumber;
const int TaskInfo::kStrExeTimeFieldNumber;
const int TaskInfo::kStrTaskChainFieldNumber;
const int TaskInfo::kStrCommentFieldNumber;
const int TaskInfo::kStrCreateTimeFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  noperatetype_ = 0;
  ntasktype_ = 0;
  ntaskid_ = 0;
  strexetime_ = const_cast< ::std::string*>(&_default_strexetime_);
  strtaskchain_ = const_cast< ::std::string*>(&_default_strtaskchain_);
  strcomment_ = const_cast< ::std::string*>(&_default_strcomment_);
  strcreatetime_ = const_cast< ::std::string*>(&_default_strcreatetime_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (strexetime_ != &_default_strexetime_) {
    delete strexetime_;
  }
  if (strtaskchain_ != &_default_strtaskchain_) {
    delete strtaskchain_;
  }
  if (strcomment_ != &_default_strcomment_) {
    delete strcomment_;
  }
  if (strcreatetime_ != &_default_strcreatetime_) {
    delete strcreatetime_;
  }
  if (this != default_instance_) {
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMsg_2eproto();  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noperatetype_ = 0;
    ntasktype_ = 0;
    ntaskid_ = 0;
    if (_has_bit(3)) {
      if (strexetime_ != &_default_strexetime_) {
        strexetime_->clear();
      }
    }
    if (_has_bit(4)) {
      if (strtaskchain_ != &_default_strtaskchain_) {
        strtaskchain_->clear();
      }
    }
    if (_has_bit(5)) {
      if (strcomment_ != &_default_strcomment_) {
        strcomment_->clear();
      }
    }
    if (_has_bit(6)) {
      if (strcreatetime_ != &_default_strcreatetime_) {
        strcreatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nOperateType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noperatetype_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nTaskType;
        break;
      }
      
      // required int32 nTaskType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTaskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntasktype_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nTaskId;
        break;
      }
      
      // optional int32 nTaskId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTaskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntaskid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strExeTime;
        break;
      }
      
      // optional string strExeTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strExeTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strexetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strexetime().data(), this->strexetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strTaskChain;
        break;
      }
      
      // optional string strTaskChain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strTaskChain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtaskchain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strtaskchain().data(), this->strtaskchain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strComment;
        break;
      }
      
      // optional string strComment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strComment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcomment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcomment().data(), this->strcomment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strCreateTime;
        break;
      }
      
      // optional string strCreateTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCreateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcreatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcreatetime().data(), this->strcreatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nOperateType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->noperatetype(), output);
  }
  
  // required int32 nTaskType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntasktype(), output);
  }
  
  // optional int32 nTaskId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ntaskid(), output);
  }
  
  // optional string strExeTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strexetime().data(), this->strexetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strexetime(), output);
  }
  
  // optional string strTaskChain = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strtaskchain().data(), this->strtaskchain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strtaskchain(), output);
  }
  
  // optional string strComment = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcomment().data(), this->strcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strcomment(), output);
  }
  
  // optional string strCreateTime = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcreatetime().data(), this->strcreatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strcreatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nOperateType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->noperatetype(), target);
  }
  
  // required int32 nTaskType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntasktype(), target);
  }
  
  // optional int32 nTaskId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ntaskid(), target);
  }
  
  // optional string strExeTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strexetime().data(), this->strexetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strexetime(), target);
  }
  
  // optional string strTaskChain = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strtaskchain().data(), this->strtaskchain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strtaskchain(), target);
  }
  
  // optional string strComment = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcomment().data(), this->strcomment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strcomment(), target);
  }
  
  // optional string strCreateTime = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcreatetime().data(), this->strcreatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strcreatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nOperateType = 1;
    if (has_noperatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noperatetype());
    }
    
    // required int32 nTaskType = 2;
    if (has_ntasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntasktype());
    }
    
    // optional int32 nTaskId = 3;
    if (has_ntaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntaskid());
    }
    
    // optional string strExeTime = 4;
    if (has_strexetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strexetime());
    }
    
    // optional string strTaskChain = 5;
    if (has_strtaskchain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strtaskchain());
    }
    
    // optional string strComment = 6;
    if (has_strcomment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcomment());
    }
    
    // optional string strCreateTime = 7;
    if (has_strcreatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcreatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_noperatetype(from.noperatetype());
    }
    if (from._has_bit(1)) {
      set_ntasktype(from.ntasktype());
    }
    if (from._has_bit(2)) {
      set_ntaskid(from.ntaskid());
    }
    if (from._has_bit(3)) {
      set_strexetime(from.strexetime());
    }
    if (from._has_bit(4)) {
      set_strtaskchain(from.strtaskchain());
    }
    if (from._has_bit(5)) {
      set_strcomment(from.strcomment());
    }
    if (from._has_bit(6)) {
      set_strcreatetime(from.strcreatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(noperatetype_, other->noperatetype_);
    std::swap(ntasktype_, other->ntasktype_);
    std::swap(ntaskid_, other->ntaskid_);
    std::swap(strexetime_, other->strexetime_);
    std::swap(strtaskchain_, other->strtaskchain_);
    std::swap(strcomment_, other->strcomment_);
    std::swap(strcreatetime_, other->strcreatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protomsg

// @@protoc_insertion_point(global_scope)
