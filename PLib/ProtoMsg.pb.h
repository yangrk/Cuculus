// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMsg.proto

#ifndef PROTOBUF_ProtoMsg_2eproto__INCLUDED
#define PROTOBUF_ProtoMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace protomsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoMsg_2eproto();
void protobuf_AssignDesc_ProtoMsg_2eproto();
void protobuf_ShutdownFile_ProtoMsg_2eproto();

class TaskInfo;

// ===================================================================

class TaskInfo : public ::google::protobuf::Message {
 public:
  TaskInfo();
  virtual ~TaskInfo();
  
  TaskInfo(const TaskInfo& from);
  
  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfo& default_instance();
  
  void Swap(TaskInfo* other);
  
  // implements Message ----------------------------------------------
  
  TaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nOperateType = 1;
  inline bool has_noperatetype() const;
  inline void clear_noperatetype();
  static const int kNOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 noperatetype() const;
  inline void set_noperatetype(::google::protobuf::int32 value);
  
  // required int32 nTaskType = 2;
  inline bool has_ntasktype() const;
  inline void clear_ntasktype();
  static const int kNTaskTypeFieldNumber = 2;
  inline ::google::protobuf::int32 ntasktype() const;
  inline void set_ntasktype(::google::protobuf::int32 value);
  
  // optional int32 nTaskId = 3;
  inline bool has_ntaskid() const;
  inline void clear_ntaskid();
  static const int kNTaskIdFieldNumber = 3;
  inline ::google::protobuf::int32 ntaskid() const;
  inline void set_ntaskid(::google::protobuf::int32 value);
  
  // optional string strExeTime = 4;
  inline bool has_strexetime() const;
  inline void clear_strexetime();
  static const int kStrExeTimeFieldNumber = 4;
  inline const ::std::string& strexetime() const;
  inline void set_strexetime(const ::std::string& value);
  inline void set_strexetime(const char* value);
  inline void set_strexetime(const char* value, size_t size);
  inline ::std::string* mutable_strexetime();
  
  // optional string strTaskChain = 5;
  inline bool has_strtaskchain() const;
  inline void clear_strtaskchain();
  static const int kStrTaskChainFieldNumber = 5;
  inline const ::std::string& strtaskchain() const;
  inline void set_strtaskchain(const ::std::string& value);
  inline void set_strtaskchain(const char* value);
  inline void set_strtaskchain(const char* value, size_t size);
  inline ::std::string* mutable_strtaskchain();
  
  // optional string strComment = 6;
  inline bool has_strcomment() const;
  inline void clear_strcomment();
  static const int kStrCommentFieldNumber = 6;
  inline const ::std::string& strcomment() const;
  inline void set_strcomment(const ::std::string& value);
  inline void set_strcomment(const char* value);
  inline void set_strcomment(const char* value, size_t size);
  inline ::std::string* mutable_strcomment();
  
  // optional string strCreateTime = 7;
  inline bool has_strcreatetime() const;
  inline void clear_strcreatetime();
  static const int kStrCreateTimeFieldNumber = 7;
  inline const ::std::string& strcreatetime() const;
  inline void set_strcreatetime(const ::std::string& value);
  inline void set_strcreatetime(const char* value);
  inline void set_strcreatetime(const char* value, size_t size);
  inline ::std::string* mutable_strcreatetime();
  
  // @@protoc_insertion_point(class_scope:protomsg.TaskInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 noperatetype_;
  ::google::protobuf::int32 ntasktype_;
  ::google::protobuf::int32 ntaskid_;
  ::std::string* strexetime_;
  static const ::std::string _default_strexetime_;
  ::std::string* strtaskchain_;
  static const ::std::string _default_strtaskchain_;
  ::std::string* strcomment_;
  static const ::std::string _default_strcomment_;
  ::std::string* strcreatetime_;
  static const ::std::string _default_strcreatetime_;
  friend void  protobuf_AddDesc_ProtoMsg_2eproto();
  friend void protobuf_AssignDesc_ProtoMsg_2eproto();
  friend void protobuf_ShutdownFile_ProtoMsg_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TaskInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TaskInfo

// required int32 nOperateType = 1;
inline bool TaskInfo::has_noperatetype() const {
  return _has_bit(0);
}
inline void TaskInfo::clear_noperatetype() {
  noperatetype_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 TaskInfo::noperatetype() const {
  return noperatetype_;
}
inline void TaskInfo::set_noperatetype(::google::protobuf::int32 value) {
  _set_bit(0);
  noperatetype_ = value;
}

// required int32 nTaskType = 2;
inline bool TaskInfo::has_ntasktype() const {
  return _has_bit(1);
}
inline void TaskInfo::clear_ntasktype() {
  ntasktype_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 TaskInfo::ntasktype() const {
  return ntasktype_;
}
inline void TaskInfo::set_ntasktype(::google::protobuf::int32 value) {
  _set_bit(1);
  ntasktype_ = value;
}

// optional int32 nTaskId = 3;
inline bool TaskInfo::has_ntaskid() const {
  return _has_bit(2);
}
inline void TaskInfo::clear_ntaskid() {
  ntaskid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 TaskInfo::ntaskid() const {
  return ntaskid_;
}
inline void TaskInfo::set_ntaskid(::google::protobuf::int32 value) {
  _set_bit(2);
  ntaskid_ = value;
}

// optional string strExeTime = 4;
inline bool TaskInfo::has_strexetime() const {
  return _has_bit(3);
}
inline void TaskInfo::clear_strexetime() {
  if (strexetime_ != &_default_strexetime_) {
    strexetime_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& TaskInfo::strexetime() const {
  return *strexetime_;
}
inline void TaskInfo::set_strexetime(const ::std::string& value) {
  _set_bit(3);
  if (strexetime_ == &_default_strexetime_) {
    strexetime_ = new ::std::string;
  }
  strexetime_->assign(value);
}
inline void TaskInfo::set_strexetime(const char* value) {
  _set_bit(3);
  if (strexetime_ == &_default_strexetime_) {
    strexetime_ = new ::std::string;
  }
  strexetime_->assign(value);
}
inline void TaskInfo::set_strexetime(const char* value, size_t size) {
  _set_bit(3);
  if (strexetime_ == &_default_strexetime_) {
    strexetime_ = new ::std::string;
  }
  strexetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskInfo::mutable_strexetime() {
  _set_bit(3);
  if (strexetime_ == &_default_strexetime_) {
    strexetime_ = new ::std::string;
  }
  return strexetime_;
}

// optional string strTaskChain = 5;
inline bool TaskInfo::has_strtaskchain() const {
  return _has_bit(4);
}
inline void TaskInfo::clear_strtaskchain() {
  if (strtaskchain_ != &_default_strtaskchain_) {
    strtaskchain_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& TaskInfo::strtaskchain() const {
  return *strtaskchain_;
}
inline void TaskInfo::set_strtaskchain(const ::std::string& value) {
  _set_bit(4);
  if (strtaskchain_ == &_default_strtaskchain_) {
    strtaskchain_ = new ::std::string;
  }
  strtaskchain_->assign(value);
}
inline void TaskInfo::set_strtaskchain(const char* value) {
  _set_bit(4);
  if (strtaskchain_ == &_default_strtaskchain_) {
    strtaskchain_ = new ::std::string;
  }
  strtaskchain_->assign(value);
}
inline void TaskInfo::set_strtaskchain(const char* value, size_t size) {
  _set_bit(4);
  if (strtaskchain_ == &_default_strtaskchain_) {
    strtaskchain_ = new ::std::string;
  }
  strtaskchain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskInfo::mutable_strtaskchain() {
  _set_bit(4);
  if (strtaskchain_ == &_default_strtaskchain_) {
    strtaskchain_ = new ::std::string;
  }
  return strtaskchain_;
}

// optional string strComment = 6;
inline bool TaskInfo::has_strcomment() const {
  return _has_bit(5);
}
inline void TaskInfo::clear_strcomment() {
  if (strcomment_ != &_default_strcomment_) {
    strcomment_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& TaskInfo::strcomment() const {
  return *strcomment_;
}
inline void TaskInfo::set_strcomment(const ::std::string& value) {
  _set_bit(5);
  if (strcomment_ == &_default_strcomment_) {
    strcomment_ = new ::std::string;
  }
  strcomment_->assign(value);
}
inline void TaskInfo::set_strcomment(const char* value) {
  _set_bit(5);
  if (strcomment_ == &_default_strcomment_) {
    strcomment_ = new ::std::string;
  }
  strcomment_->assign(value);
}
inline void TaskInfo::set_strcomment(const char* value, size_t size) {
  _set_bit(5);
  if (strcomment_ == &_default_strcomment_) {
    strcomment_ = new ::std::string;
  }
  strcomment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskInfo::mutable_strcomment() {
  _set_bit(5);
  if (strcomment_ == &_default_strcomment_) {
    strcomment_ = new ::std::string;
  }
  return strcomment_;
}

// optional string strCreateTime = 7;
inline bool TaskInfo::has_strcreatetime() const {
  return _has_bit(6);
}
inline void TaskInfo::clear_strcreatetime() {
  if (strcreatetime_ != &_default_strcreatetime_) {
    strcreatetime_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& TaskInfo::strcreatetime() const {
  return *strcreatetime_;
}
inline void TaskInfo::set_strcreatetime(const ::std::string& value) {
  _set_bit(6);
  if (strcreatetime_ == &_default_strcreatetime_) {
    strcreatetime_ = new ::std::string;
  }
  strcreatetime_->assign(value);
}
inline void TaskInfo::set_strcreatetime(const char* value) {
  _set_bit(6);
  if (strcreatetime_ == &_default_strcreatetime_) {
    strcreatetime_ = new ::std::string;
  }
  strcreatetime_->assign(value);
}
inline void TaskInfo::set_strcreatetime(const char* value, size_t size) {
  _set_bit(6);
  if (strcreatetime_ == &_default_strcreatetime_) {
    strcreatetime_ = new ::std::string;
  }
  strcreatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskInfo::mutable_strcreatetime() {
  _set_bit(6);
  if (strcreatetime_ == &_default_strcreatetime_) {
    strcreatetime_ = new ::std::string;
  }
  return strcreatetime_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protomsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoMsg_2eproto__INCLUDED
